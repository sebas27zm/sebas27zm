@startuml SistemaBancarioFinal

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontColor black
skinparam classFontSize 10
skinparam classBackgroundColor white
skinparam classBorderColor black

' Interfaces
interface ITransaccion {
    +retirar(monto: double): boolean
    +pagar(monto: double): boolean
}

interface IDeposito {
    +depositar(monto: double): boolean
}

interface IAbono {
    +abonar(monto: double): boolean
}

interface IInteres {
    +generarIntereses(): void
    +getPorcentajeInteres(): double
    +setPorcentajeInteres(porcentaje: double): void
}

' Clases Abstractas
abstract class Usuario {
    #nombre: String
    #apellidos: String
    #numeroCedula: String
    #correoElectronico: String
    #contrasena: String
    
    +Usuario(nombre: String, apellidos: String, cedula: String, correo: String, contrasena: String)
    +getNombre(): String
    +getApellidos(): String
    +getNumeroCedula(): String
    +getCorreoElectronico(): String
    +getContrasena(): String
    +setNombre(nombre: String): void
    +setApellidos(apellidos: String): void
    +setNumeroCedula(cedula: String): void
    +setCorreoElectronico(correo: String): void
    +setContrasena(contrasena: String): void
    +validarCredenciales(correo: String, contrasena: String): boolean
    +toString(): String
}

abstract class Cuenta {
    #contadorCuentas: int {static}
    #numeroCuenta: int
    #saldo: double
    #activa: boolean
    #propietario: Cliente
    
    +Cuenta(propietario: Cliente, saldoInicial: double)
    +getNumeroCuenta(): int
    +getSaldo(): double
    +isActiva(): boolean
    +getPropietario(): Cliente
    +setActiva(activa: boolean): void
    +{abstract} retirar(monto: double): boolean
    +{abstract} pagar(monto: double): boolean
    +{abstract} getTipoCuenta(): String
    #validarTransaccion(monto: double): boolean
    +toString(): String
}

' Clases Concretas - Usuarios
class Administrador {
    +Administrador(nombre: String, apellidos: String, cedula: String, correo: String, contrasena: String)
    +toString(): String
}

class Cliente {
    -sexo: String
    -profesion: String
    -direccion: String
    -cuentas: List<Cuenta>
    
    +Cliente(nombre: String, apellidos: String, cedula: String, correo: String, contrasena: String, sexo: String, profesion: String, direccion: String)
    +getSexo(): String
    +getProfesion(): String
    +getDireccion(): String
    +getCuentas(): List<Cuenta>
    +setSexo(sexo: String): void
    +setProfesion(profesion: String): void
    +setDireccion(direccion: String): void
    +agregarCuenta(cuenta: Cuenta): void
    +removerCuenta(cuenta: Cuenta): void
    +toString(): String
    +reporteCuentas(): String
}

' Clases Concretas - Cuentas
class CuentaAhorro {
    -SALDO_MINIMO: double {static}
    -porcentajeInteres: double
    
    +CuentaAhorro(propietario: Cliente, saldoInicial: double, porcentajeInteres: double)
    +getTipoCuenta(): String
    +depositar(monto: double): boolean
    +retirar(monto: double): boolean
    +pagar(monto: double): boolean
    +generarIntereses(): void
    +getPorcentajeInteres(): double
    +setPorcentajeInteres(porcentaje: double): void
    +toString(): String
}

class CuentaDebito {
    -porcentajeInteres: double
    
    +CuentaDebito(propietario: Cliente, saldoInicial: double, porcentajeInteres: double)
    +getTipoCuenta(): String
    +depositar(monto: double): boolean
    +retirar(monto: double): boolean
    +pagar(monto: double): boolean
    +generarIntereses(): void
    +getPorcentajeInteres(): double
    +setPorcentajeInteres(porcentaje: double): void
    +toString(): String
}

class CuentaCredito {
    -limiteCredito: double
    -tipo: String
    
    +CuentaCredito(propietario: Cliente, limiteCredito: double, tipo: String)
    +getTipoCuenta(): String
    +abonar(monto: double): boolean
    +retirar(monto: double): boolean
    +pagar(monto: double): boolean
    +getLimiteCredito(): double
    +setLimiteCredito(limite: double): void
    +getTipo(): String
    +setTipo(tipo: String): void
    +getCreditoDisponible(): double
    +toString(): String
}

' Clases de L贸gica de Negocio
class SistemaBancarioBI {
    -administrador: Administrador
    -clientes: List<Cliente>
    
    +SistemaBancarioBI()
    +crearAdministrador(nombre: String, apellidos: String, cedula: String, correo: String, contrasena: String): boolean
    +validarAdministrador(correo: String, contrasena: String): boolean
    +existeAdministrador(): boolean
    +registrarCliente(nombre: String, apellidos: String, cedula: String, correo: String, contrasena: String, sexo: String, profesion: String, direccion: String): boolean
    +validarCliente(correo: String, contrasena: String): Cliente
    +obtenerClientes(): List<Cliente>
    +hayClientes(): boolean
    +crearCuentaAhorro(cliente: Cliente, saldo: double, interes: double): boolean
    +crearCuentaDebito(cliente: Cliente, saldo: double, interes: double): boolean
    +crearCuentaCredito(cliente: Cliente, limite: double, tipo: String): boolean
    +obtenerCuentasPorTipo(tipo: String): List<Cuenta>
    +buscarCuentaPorNumero(numeroCuenta: int): Cuenta
    +cambiarEstadoCuenta(numeroCuenta: int): boolean
    +realizarDeposito(cuenta: Cuenta, monto: double): boolean
    +realizarRetiro(cuenta: Cuenta, monto: double): boolean
    +realizarPago(cuenta: Cuenta, monto: double): boolean
    +realizarAbono(cuenta: Cuenta, monto: double): boolean
    +generarInteresesCliente(cliente: Cliente): void
    +tieneIntereses(cliente: Cliente): boolean
}

class SistemaBancarioUI {
    -logicaNegocio: SistemaBancarioBI
    -scanner: Scanner
    
    +SistemaBancarioUI()
    +iniciar(): void
    -mostrarMenuPrincipal(): void
    -leerOpcion(): int
    -manejarCrearAdministrador(): void
    -manejarLoginAdministrador(): void
    -menuAdministrador(): void
    -manejarRegistrarCliente(): void
    -manejarListarClientes(): void
    -manejarListarCuentasPorTipo(tipo: String): void
    -manejarCrearCuentaParaCliente(): void
    -manejarCrearCuentaAhorro(cliente: Cliente): void
    -manejarCrearCuentaDebito(cliente: Cliente): void
    -manejarCrearCuentaCredito(cliente: Cliente): void
    -manejarActivarDesactivarCuenta(): void
    -manejarLoginCliente(): void
    -menuCliente(cliente: Cliente): void
    -manejarRealizarTransaccion(cliente: Cliente): void
    -manejarGenerarIntereses(cliente: Cliente): void
    +main(args: String[]): void
}

' Relaciones de Herencia
Usuario <|-- Administrador
Usuario <|-- Cliente
Cuenta <|-- CuentaAhorro
Cuenta <|-- CuentaDebito
Cuenta <|-- CuentaCredito

' Relaciones de Implementaci贸n
Cuenta ..|> ITransaccion
CuentaAhorro ..|> IDeposito
CuentaAhorro ..|> IInteres
CuentaDebito ..|> IDeposito
CuentaDebito ..|> IInteres
CuentaCredito ..|> IAbono

' Relaciones de Composici贸n/Agregaci贸n
Cliente "1" *-- "0..*" Cuenta : posee
Cuenta "1" --> "1" Cliente : propietario
SistemaBancarioBI "1" *-- "0..1" Administrador : gestiona
SistemaBancarioBI "1" *-- "0..*" Cliente : gestiona
SistemaBancarioUI "1" *-- "1" SistemaBancarioBI : utiliza

@enduml